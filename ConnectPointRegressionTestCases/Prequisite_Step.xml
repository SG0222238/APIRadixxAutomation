<?xml version="1.0" encoding="UTF-8"?>
<con:testCase discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" id="19b662e5-acaa-4c2d-b343-9c8f079d4d2c" keepSession="false" name="Prequisite_Step" searchProperties="true" timeout="0" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="19b662e5-acaa-4c2d-b343-9c8f079d4d2cfileName">Prequisite_Step</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep id="93c16e07-4dd5-4c85-9ca2-62f3497b8927" name="1. RetrieveSecurityToken" type="request">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>BasicHttpBinding_IConnectPoint_Security</con:interface>
      <con:operation>RetrieveSecurityToken</con:operation>
      <con:request id="4ae458c3-17a0-4bf7-88ff-227035d525d4" name="1. RetrieveSecurityToken">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>https://20Q4appint.radixxuat.com/20Q4/Radixx.ConnectPoint/ConnectPoint.Security.svc</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tem="http://tempuri.org/" xmlns:rad="http://schemas.datacontract.org/2004/07/Radixx.ConnectPoint.Request" xmlns:rad1="http://schemas.datacontract.org/2004/07/Radixx.ConnectPoint.Security.Request">
   <soapenv:Header/>
   <soapenv:Body>
      <tem:RetrieveSecurityToken>
         <!--Optional:-->
         <tem:RetrieveSecurityTokenRequest>
            <rad:CarrierCodes>
               <!--Zero or more repetitions:-->
               <rad:CarrierCode><rad:AccessibleCarrierCode>${#Project#CarrierCode}</rad:AccessibleCarrierCode></rad:CarrierCode>
            </rad:CarrierCodes>
			<rad1:LogonID>${#Project#LogonID}</rad1:LogonID>
            <rad1:Password>${#Project#Password}</rad1:Password>
           </tem:RetrieveSecurityTokenRequest>
      </tem:RetrieveSecurityToken>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion id="bf589686-356f-4900-8474-369eecd57c9b" type="SOAP Response"/>
        <con:credentials>
          <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="42067210-8faf-496e-9903-735195c8b807">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="2fb8d303-fbf4-417d-bb55-a4b3fd95d992">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="82c600e1-08a5-4119-8f39-3ec0063af62b">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="aa4d83a8-992e-4595-b337-c133b99c7d47">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="266625f2-0734-4c67-922f-44c12c1e96c3">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="1228afff-bd8a-4ac8-8219-3476c0c2e1a7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="22c0b523-17e2-4fd7-bec7-1e97bba8fca0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="29f1cd0d-74cc-467c-b769-6ed28af6a934">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2cb9c1f-3447-44cc-817e-6c9250a145e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f767135c-09a3-4e04-8b74-c590a4545d2f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="58517e45-67c6-46bc-91a7-7797dc6d5a29">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f4f8d182-e94d-420f-973e-79d7b7fd4447">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5e240e72-1cf2-4ca5-b39f-e331e343e588">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="470465ed-5408-41d0-b35d-9664d7e62e41">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8dd82788-5479-4828-bb65-93a451e6597a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="30ab15a5-9b61-4b0e-a3d0-750dbd01aa74">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="70182b60-9e06-48f3-80d0-3b931c509804">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="98c7d7c1-1301-4b4a-b3b8-3e00e73f7d58">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="01df9476-85e6-4abe-8ebd-ccd26599bd57">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="d6291f86-aed6-4f4f-9979-ede938dd6d41">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="443d548e-7832-470a-9c5a-142462db637e">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="cf6dd0cd-2bdd-4427-9583-077b0f2cc3c7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="9f4a82e7-73e7-494c-8588-d0dc56c1637a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="823483de-13b5-4699-b242-7a2a932165fd">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e19b76a9-9631-4bb0-b5f3-a8df542369bb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="9c38f7e8-32de-4fc7-b864-5c02856c899f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="d7e55844-7e2b-4752-a457-3386f2e7d52f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="16846aa6-d89c-4a10-8bae-e8fef5da42a3">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="1f5ec027-962d-4f25-a6ee-1ae8f0f33f24">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="95d589f0-de97-4106-bb99-20277cf5b07a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f16ee803-1c40-4999-8e75-ed9970e88874">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="0df698c7-f3f2-4bb7-a6fc-54712b2e8e65">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="377b43a4-6040-43b4-b917-084b0f2c0148">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="d3675b90-2639-4214-9670-d4333b5e6d39">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="9a433573-65e6-4dfa-8a67-14ed29034e9d">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="488e5be0-d9d9-4916-bcbf-a47f3fa6db42">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="43f54844-b6cd-4ffa-800d-588a2745aa74">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="ff76c282-7c43-48ac-88d6-a00107f279b7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep id="d8523e1d-5331-40b9-9cb2-9cbd163428a6" name="Groovy Script_input TestSuite" type="groovy">
    <con:settings/>
    <con:config>
      <script>// importing the Java methods
import java.text.SimpleDateFormat;
import java.util.Date;

def securityToken = context.expand( '${1. RetrieveSecurityToken#Response#declare namespace a=\'http://schemas.datacontract.org/2004/07/Radixx.ConnectPoint.Security.Response\'; declare namespace ns1=\'http://tempuri.org/\'; //ns1:RetrieveSecurityTokenResponse[1]/ns1:RetrieveSecurityTokenResult[1]/a:SecurityToken[1]}' )

testRunner.testCase.testSuite.setPropertyValue("securityToken", securityToken);


def DepartureDate = new Date().plus(3)
def ReturnDate = new Date().plus(6)
def ModifyDate = new Date().plus(6)
def ModifyDate_returnSeg = new Date().plus(15)
def Date_NewSeg = new Date().plus(16)
def CS_DepartureDate = new Date().plus(5)

//DOB	
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");	
//ADT age	
int age = 44;	
Calendar a  = Calendar.getInstance();	
a.add(Calendar.YEAR,- age);	
ADT_DOB= sdf.format(a.getTime());	
//CHD age	
int ChdAge = 6;	
Calendar c  = Calendar.getInstance();	
c.add(Calendar.YEAR,- ChdAge);	
p_DOB_CHD= sdf.format(c.getTime());	
//INF age	
def p_DOB_INF= new Date().minus(120)



/* Perf prod*/ 
def origin = "YVR"
def destination = "YYZ"
def new_Segment = "NRT"
def flightnum = "699"
def carriercode = "1D"
def FBC = "EOW"
def currency = "CAD"
def paycurrency = "CAD"
def IATANumber = "1000"
def FlightNumReturn = "203"


def generator = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
FirstNameRandom = generator( (('A'..'Z')+('0'..'9')+('a'..'z')).join(), 6 )
LastNameRandom = generator( (('A'..'Z')+('0'..'9')+('a'..'z')).join(), 6 )
testRunner.testCase.testSuite.setPropertyValue("FirstNameRandom", FirstNameRandom);
testRunner.testCase.testSuite.setPropertyValue("LasttNameRandom", LastNameRandom);


def ebr = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}
ebr1 = ebr( (('A'..'Z')).join(), 2 )
ebr2 = ebr( (('0'..'9')).join(), 4 )
ExternalBookingReference = ebr1 + ebr2
testRunner.testCase.testSuite.setPropertyValue("ExternalBookingReference",ExternalBookingReference);

	//Summary and FQ	
testRunner.testCase.testSuite.setPropertyValue("LanguageCode", "en");

//Date and flight info
testRunner.testCase.testSuite.setPropertyValue("DepartureDate", DepartureDate.format("yyyy-MM-dd"));
testRunner.testCase.testSuite.setPropertyValue("ReturnDate", ReturnDate.format("yyyy-MM-dd"));
testRunner.testCase.testSuite.setPropertyValue("ModifyDate", ModifyDate.format("yyyy-MM-dd"));
testRunner.testCase.testSuite.setPropertyValue("ModifyDate_returnSeg", ModifyDate_returnSeg.format("yyyy-MM-dd"));
testRunner.testCase.testSuite.setPropertyValue("Date_NewSeg", Date_NewSeg.format("yyyy-MM-dd"));

testRunner.testCase.testSuite.setPropertyValue("Origin", origin);
testRunner.testCase.testSuite.setPropertyValue("Destination", destination);
testRunner.testCase.testSuite.setPropertyValue("New_Segment", new_Segment);
testRunner.testCase.testSuite.setPropertyValue("flightnum", flightnum);
testRunner.testCase.testSuite.setPropertyValue("carriercode", carriercode);
testRunner.testCase.testSuite.setPropertyValue("FBC", FBC);
testRunner.testCase.testSuite.setPropertyValue("currency", currency);
testRunner.testCase.testSuite.setPropertyValue("paycurrency", paycurrency);
testRunner.testCase.testSuite.setPropertyValue("IATANumber", IATANumber);
testRunner.testCase.testSuite.setPropertyValue("FlightNumReturn", FlightNumReturn);

//Passenger Info
def FirstName = org.apache.commons.lang.RandomStringUtils.randomAlphabetic(6)
def LastName = org.apache.commons.lang.RandomStringUtils.randomAlphabetic(6)
def MiddleName = org.apache.commons.lang.RandomStringUtils.randomAlphabetic(6)
testRunner.testCase.testSuite.setPropertyValue("p_FirstName", FirstName.toUpperCase().concat("ADT"));
testRunner.testCase.testSuite.setPropertyValue("p_LastName", LastName.toUpperCase().concat("ADT"));
testRunner.testCase.testSuite.setPropertyValue("p_MiddleName", MiddleName.toUpperCase().concat("ADT"));
testRunner.testCase.testSuite.setPropertyValue("p_Title", "Ms");
testRunner.testCase.testSuite.setPropertyValue("p_DOB", ADT_DOB);
testRunner.testCase.testSuite.setPropertyValue("p_Age", age.toString());
testRunner.testCase.testSuite.setPropertyValue("p_Gender", "Male");
testRunner.testCase.testSuite.setPropertyValue("p_PTC", "ADT");
testRunner.testCase.testSuite.setPropertyValue("p_Nationality", "840");
testRunner.testCase.testSuite.setPropertyValue("p_Citizenship", "840");
testRunner.testCase.testSuite.setPropertyValue("p_Language", "1");
testRunner.testCase.testSuite.setPropertyValue("p_PhoneNumber", "+46701497931");
def Email = org.apache.commons.lang.RandomStringUtils.randomAlphabetic(6)
testRunner.testCase.testSuite.setPropertyValue("p_Email",Email.toUpperCase().concat("@radixx.com"));
testRunner.testCase.testSuite.setPropertyValue("PaymentMethod", "CASH");
testRunner.testCase.testSuite.setPropertyValue("PaymentMethodTA", "INVC");
testRunner.testCase.testSuite.setPropertyValue("ServiceCode", "SEAT");

testRunner.testCase.testSuite.setPropertyValue("p_FirstNameCHD", FirstName.toUpperCase().concat("CHD"));
testRunner.testCase.testSuite.setPropertyValue("p_LastNameCHD",  LastName.toUpperCase().concat("CHD"));
testRunner.testCase.testSuite.setPropertyValue("p_MiddleName",MiddleName.toUpperCase().concat("CHD"));
testRunner.testCase.testSuite.setPropertyValue("p_DOB_CHD", p_DOB_CHD);

testRunner.testCase.testSuite.setPropertyValue("p_FirstNameINF", FirstName.toUpperCase().concat("INF"));
testRunner.testCase.testSuite.setPropertyValue("p_LastNameINF", LastName.toUpperCase().concat("INF"));
testRunner.testCase.testSuite.setPropertyValue("p_MiddleName", MiddleName.toUpperCase().concat("INF"));
testRunner.testCase.testSuite.setPropertyValue("p_DOB_INF",p_DOB_INF.format("yyyy-MM-dd"));


testRunner.testCase.testSuite.setPropertyValue("p_FirstName_2ndPax", "RadixxSecond");
testRunner.testCase.testSuite.setPropertyValue("p_LastName_2ndPax", "Tester");
testRunner.testCase.testSuite.setPropertyValue("p_MiddleName_2ndPax", "Automation");



//APIS info - 1 ADT

testRunner.testCase.testSuite.setPropertyValue("p_DocType1", "1");
testRunner.testCase.testSuite.setPropertyValue("p_DocNumber1", "AAAA1111");
testRunner.testCase.testSuite.setPropertyValue("p_IssueCountry1", "124");
testRunner.testCase.testSuite.setPropertyValue("p_ExpiryDate1", "2030-01-01");
testRunner.testCase.testSuite.setPropertyValue("p_DocType2", "2");
testRunner.testCase.testSuite.setPropertyValue("p_DocNumber2", "BBBB1111");
testRunner.testCase.testSuite.setPropertyValue("p_IssueCountry2", "356");
testRunner.testCase.testSuite.setPropertyValue("p_ExpiryDate2", "2032-01-01");
testRunner.testCase.testSuite.setPropertyValue("p_BirthCity", "YVR");
testRunner.testCase.testSuite.setPropertyValue("p_BirthState", "TN");
testRunner.testCase.testSuite.setPropertyValue("p_BirthCountry", "356");
testRunner.testCase.testSuite.setPropertyValue("p_HomeAddress", "6310 HAZELTINE NATIONAL DR");
testRunner.testCase.testSuite.setPropertyValue("p_HomeCity", "ORLANDO");
testRunner.testCase.testSuite.setPropertyValue("p_HomeState", "FL");
testRunner.testCase.testSuite.setPropertyValue("p_HomePostal", "32822");
testRunner.testCase.testSuite.setPropertyValue("p_DestAddress", "MILENIA");
testRunner.testCase.testSuite.setPropertyValue("p_DestCity", "BWI");
testRunner.testCase.testSuite.setPropertyValue("p_DestState", "TN");
testRunner.testCase.testSuite.setPropertyValue("p_DestPostal", "8989");
testRunner.testCase.testSuite.setPropertyValue("p_DestCountry", "120");

//Seat
testRunner.testCase.testSuite.setPropertyValue("RowSeat", "A");
testRunner.testCase.testSuite.setPropertyValue("RowNumber", "1");
testRunner.testCase.testSuite.setPropertyValue("RowSeat_INF", "B");
testRunner.testCase.testSuite.setPropertyValue("RowNumber_INF", "1");
testRunner.testCase.testSuite.setPropertyValue("RowSeat_CHD", "C");
testRunner.testCase.testSuite.setPropertyValue("RowNumber_CHD", "1");

testRunner.testCase.testSuite.setPropertyValue("RowSeat_returnSeg", "A");
testRunner.testCase.testSuite.setPropertyValue("RowNumber_returnSeg", "5");
testRunner.testCase.testSuite.setPropertyValue("RowSeat_returnSeg_INF", "B");
testRunner.testCase.testSuite.setPropertyValue("RowNumber_returnSeg_INF", "5");
testRunner.testCase.testSuite.setPropertyValue("RowSeat_returnSeg_CHD", "C");
testRunner.testCase.testSuite.setPropertyValue("RowNumber_returnSeg_CHD", "5");

//add OAL Flight Segment
testRunner.testCase.testSuite.setPropertyValue("OAL_CarrierCode", "WG");
testRunner.testCase.testSuite.setPropertyValue("OAL_FlightNumber","1590");
testRunner.testCase.testSuite.setPropertyValue("OAL_Origin", "YUL");
testRunner.testCase.testSuite.setPropertyValue("OAL_Destination", "CDG");
testRunner.testCase.testSuite.setPropertyValue("OAL_FarebasisCode", "B");
testRunner.testCase.testSuite.setPropertyValue("OAL_ScheduledDepartureTime", "T12:30:00.000+05:00");
testRunner.testCase.testSuite.setPropertyValue("OAL_ScheduledArrivalTime", "T15:30:00.000+05:00");


//Codeshare info
testRunner.testCase.testSuite.setPropertyValue("CS_CarrierCode", "1D");
testRunner.testCase.testSuite.setPropertyValue("CS_FlightNumber","102/1534");
testRunner.testCase.testSuite.setPropertyValue("CS_Origin", "YUL");
testRunner.testCase.testSuite.setPropertyValue("CS_Destination", "MIA");
testRunner.testCase.testSuite.setPropertyValue("CS_FarebasisCode", "B");
testRunner.testCase.testSuite.setPropertyValue("CS_DepartureDate", CS_DepartureDate.format("yyyy-MM-dd"));

//SSR info
testRunner.testCase.testSuite.setPropertyValue("SSR", "CNDY");

//IEP call
testRunner.testCase.testSuite.setPropertyValue("PaymentMethod", "CASH");
testRunner.testCase.testSuite.setPropertyValue("PaymentMethodTA", "INVC");
def ExpDate = new Date().plus(100)
testRunner.testCase.testSuite.setPropertyValue("ExpirationDate", ExpDate.format("yyyy-MM-dd"));
def ExchangeRateDate = new Date()
testRunner.testCase.testSuite.setPropertyValue("ExchangeRateDate", ExchangeRateDate.format("yyyy-MM-dd"));
testRunner.testCase.testSuite.setPropertyValue("NotApplicable", "na");
testRunner.testCase.testSuite.setPropertyValue("TransactionStatus", "APPROVED");
testRunner.testCase.testSuite.setPropertyValue("BillingCountry", "840");
testRunner.testCase.testSuite.setPropertyValue("CountryCode", "840");
testRunner.testCase.testSuite.setPropertyValue("ProcessorName", "OPPY");
testRunner.testCase.testSuite.setPropertyValue("SeriesNumber", "299");
testRunner.testCase.testSuite.setPropertyValue("UserName", "radixx");
testRunner.testCase.testSuite.setPropertyValue("Reference", "Test");
testRunner.testCase.testSuite.setPropertyValue("Comments", "Test");
testRunner.testCase.testSuite.setPropertyValue("CheckNumber", "123");
testRunner.testCase.testSuite.setPropertyValue("NotApplicable", "na");
testRunner.testCase.testSuite.setPropertyValue("AuthorizationCode", "t1");
testRunner.testCase.testSuite.setPropertyValue("PaymentReference", "t2");
testRunner.testCase.testSuite.setPropertyValue("ResponseMessage", "t3");

//VISA
testRunner.testCase.testSuite.setPropertyValue("CardNumber", "4111111111111111");
testRunner.testCase.testSuite.setPropertyValue("CVCode", "123");

//IEP Address
testRunner.testCase.testSuite.setPropertyValue("Address1", "123 Elm Street");
testRunner.testCase.testSuite.setPropertyValue("Address2", "Suite 150");
testRunner.testCase.testSuite.setPropertyValue("City", "Maitland");
testRunner.testCase.testSuite.setPropertyValue("State", "FL");
testRunner.testCase.testSuite.setPropertyValue("Postal", "32751");
testRunner.testCase.testSuite.setPropertyValue("Country", "usa");
testRunner.testCase.testSuite.setPropertyValue("ID", "1");



log.info(DepartureDate)
log.info(ModifyDate)
log.info(CS_DepartureDate)</script>
    </con:config>
  </con:testStep>
  <con:testStep disabled="true" id="96599a60-a8df-4dd2-a572-64af748ae87e" name="Groovy Script_Ref_do not delete" type="groovy">
    <con:settings/>
    <con:config>
      <script>// importing the Java methods
import java.text.SimpleDateFormat;
import java.util.Date;

def securityToken = context.expand( '${1. RetrieveSecurityToken#Response#declare namespace a=\'http://schemas.datacontract.org/2004/07/Radixx.ConnectPoint.Security.Response\'; declare namespace ns1=\'http://tempuri.org/\'; //ns1:RetrieveSecurityTokenResponse[1]/ns1:RetrieveSecurityTokenResult[1]/a:SecurityToken[1]}' )
testRunner.testCase.testSuite.setPropertyValue("securityToken", securityToken);

log.info(securityToken)

/* Flight Infromation*/ 
def origin = "YVR"
def destination = "YYZ"
def new_Segment = "NRT"
def flightnum = "204"
def carriercode = "1D"
def currency = "CAD"
def paycurrency = "CAD"
def IATANumber = "1000"

def DepartureDate = new Date().plus(0)
def ReturnDate = new Date().plus(6)
def ModifyDate = new Date().plus(6)
def ModifyDate_returnSeg = new Date().plus(15)
def Date_NewSeg = new Date().plus(16)

//DOB
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
//ADT age
int age = 44;
Calendar a  = Calendar.getInstance();
a.add(Calendar.YEAR,- age);
ADT_DOB= sdf.format(a.getTime());

//CHD age
int ChdAge = 6;
Calendar c  = Calendar.getInstance();
c.add(Calendar.YEAR,- ChdAge);
p_DOB_CHD= sdf.format(c.getTime());

//INF age
def p_DOB_INF= new Date().minus(120)





//Date and flight info
testRunner.testCase.testSuite.setPropertyValue("DepartureDate", DepartureDate.format("yyyy-MM-dd"));
testRunner.testCase.testSuite.setPropertyValue("ReturnDate", ReturnDate.format("yyyy-MM-dd"));
testRunner.testCase.testSuite.setPropertyValue("ModifyDate", ModifyDate.format("yyyy-MM-dd"));
testRunner.testCase.testSuite.setPropertyValue("ModifyDate_returnSeg", ModifyDate_returnSeg.format("yyyy-MM-dd"));
testRunner.testCase.testSuite.setPropertyValue("Date_NewSeg", Date_NewSeg.format("yyyy-MM-dd"));

testRunner.testCase.testSuite.setPropertyValue("Origin", origin);
testRunner.testCase.testSuite.setPropertyValue("Destination", destination);
testRunner.testCase.testSuite.setPropertyValue("New_Segment", new_Segment);
testRunner.testCase.testSuite.setPropertyValue("flightnum", flightnum);
testRunner.testCase.testSuite.setPropertyValue("carriercode", carriercode);
testRunner.testCase.testSuite.setPropertyValue("currency", currency);
testRunner.testCase.testSuite.setPropertyValue("paycurrency", paycurrency);
testRunner.testCase.testSuite.setPropertyValue("IATANumber", IATANumber);

//Passenger Info
def FirstName = org.apache.commons.lang.RandomStringUtils.randomAlphabetic(6)
def LastName = org.apache.commons.lang.RandomStringUtils.randomAlphabetic(6)
def MiddleName = org.apache.commons.lang.RandomStringUtils.randomAlphabetic(6)
testRunner.testCase.testSuite.setPropertyValue("p_FirstName", FirstName.toUpperCase().concat("ADT"));
testRunner.testCase.testSuite.setPropertyValue("p_LastName", LastName.toUpperCase().concat("ADT"));
testRunner.testCase.testSuite.setPropertyValue("p_MiddleName", MiddleName.toUpperCase().concat("ADT"));
testRunner.testCase.testSuite.setPropertyValue("p_Title", "Ms");
testRunner.testCase.testSuite.setPropertyValue("p_DOB", ADT_DOB);
testRunner.testCase.testSuite.setPropertyValue("p_Age", age.toString());
testRunner.testCase.testSuite.setPropertyValue("p_Gender", "Male");
testRunner.testCase.testSuite.setPropertyValue("p_PTC", "ADT");
testRunner.testCase.testSuite.setPropertyValue("p_Nationality", "840");
testRunner.testCase.testSuite.setPropertyValue("p_Citizenship", "840");
testRunner.testCase.testSuite.setPropertyValue("p_Language", "1");
testRunner.testCase.testSuite.setPropertyValue("p_PhoneNumber", "+46701497931");
testRunner.testCase.testSuite.setPropertyValue("p_Email", "test@radixx.com");
testRunner.testCase.testSuite.setPropertyValue("PaymentMethod", "CASH");
testRunner.testCase.testSuite.setPropertyValue("PaymentMethodTA", "INVC");
testRunner.testCase.testSuite.setPropertyValue("ServiceCode", "SEAT");

testRunner.testCase.testSuite.setPropertyValue("p_FirstNameCHD", FirstName.toUpperCase().concat("CHD"));
testRunner.testCase.testSuite.setPropertyValue("p_LastNameCHD",  LastName.toUpperCase().concat("CHD"));
testRunner.testCase.testSuite.setPropertyValue("p_MiddleName",MiddleName.toUpperCase().concat("CHD"));
testRunner.testCase.testSuite.setPropertyValue("p_DOB_CHD", p_DOB_CHD);

testRunner.testCase.testSuite.setPropertyValue("p_FirstNameINF", FirstName.toUpperCase().concat("INF"));
testRunner.testCase.testSuite.setPropertyValue("p_LastNameINF", LastName.toUpperCase().concat("INF"));
testRunner.testCase.testSuite.setPropertyValue("p_MiddleName", MiddleName.toUpperCase().concat("INF"));
testRunner.testCase.testSuite.setPropertyValue("p_DOB_INF",p_DOB_INF.format("yyyy-MM-dd"));

//IEP call
testRunner.testCase.testSuite.setPropertyValue("PaymentMethod", "CASH");
testRunner.testCase.testSuite.setPropertyValue("PaymentMethodTA", "INVC");
def ExpDate = new Date().plus(100)
testRunner.testCase.testSuite.setPropertyValue("ExpirationDate", ExpDate.format("yyyy-MM-dd"));
def ExchangeRateDate = new Date()
testRunner.testCase.testSuite.setPropertyValue("ExchangeRateDate", ExchangeRateDate.format("yyyy-MM-dd"));
testRunner.testCase.testSuite.setPropertyValue("NotApplicable", "na");
testRunner.testCase.testSuite.setPropertyValue("TransactionStatus", "NOTYETPROCESSED");
testRunner.testCase.testSuite.setPropertyValue("BillingCountry", "840");
testRunner.testCase.testSuite.setPropertyValue("ProcessorName", "OPPY");
testRunner.testCase.testSuite.setPropertyValue("SeriesNumber", "299");
testRunner.testCase.testSuite.setPropertyValue("UserName", "radixx");
testRunner.testCase.testSuite.setPropertyValue("Reference", "Test");
testRunner.testCase.testSuite.setPropertyValue("Comments", "Test");
testRunner.testCase.testSuite.setPropertyValue("CheckNumber", "123");
testRunner.testCase.testSuite.setPropertyValue("NotApplicable", "na");
testRunner.testCase.testSuite.setPropertyValue("AuthorizationCode", "t1");
testRunner.testCase.testSuite.setPropertyValue("PaymentReference", "t2");
testRunner.testCase.testSuite.setPropertyValue("ResponseMessage", "t3");

//IEP Address

testRunner.testCase.testSuite.setPropertyValue("Address1", "123 Elm Street");
testRunner.testCase.testSuite.setPropertyValue("City", "Maitland");
testRunner.testCase.testSuite.setPropertyValue("State", "FL");
testRunner.testCase.testSuite.setPropertyValue("Postal", "32751");
testRunner.testCase.testSuite.setPropertyValue("Country", "usa");
testRunner.testCase.testSuite.setPropertyValue("ID", "1");

//APIS info - 1 ADT

testRunner.testCase.testSuite.setPropertyValue("p_DocType1", "1");
testRunner.testCase.testSuite.setPropertyValue("p_DocNumber1", "AAAA1111");
testRunner.testCase.testSuite.setPropertyValue("p_IssueCountry1", "124");
testRunner.testCase.testSuite.setPropertyValue("p_ExpiryDate1", "2030-01-01");
testRunner.testCase.testSuite.setPropertyValue("p_DocType2", "2");
testRunner.testCase.testSuite.setPropertyValue("p_DocNumber2", "BBBB1111");
testRunner.testCase.testSuite.setPropertyValue("p_IssueCountry2", "356");
testRunner.testCase.testSuite.setPropertyValue("p_ExpiryDate2", "2032-01-01");
testRunner.testCase.testSuite.setPropertyValue("p_BirthCity", "YVR");
testRunner.testCase.testSuite.setPropertyValue("p_BirthState", "TN");
testRunner.testCase.testSuite.setPropertyValue("p_BirthCountry", "356");
testRunner.testCase.testSuite.setPropertyValue("p_HomeAddress", "6310 HAZELTINE NATIONAL DR");
testRunner.testCase.testSuite.setPropertyValue("p_HomeCity", "ORLANDO");
testRunner.testCase.testSuite.setPropertyValue("p_HomeState", "FL");
testRunner.testCase.testSuite.setPropertyValue("p_HomePostal", "32822");
testRunner.testCase.testSuite.setPropertyValue("p_DestAddress", "MILENIA");
testRunner.testCase.testSuite.setPropertyValue("p_DestCity", "BWI");
testRunner.testCase.testSuite.setPropertyValue("p_DestState", "TN");
testRunner.testCase.testSuite.setPropertyValue("p_DestPostal", "8989");
testRunner.testCase.testSuite.setPropertyValue("p_DestCountry", "120");

//Seat
testRunner.testCase.testSuite.setPropertyValue("RowSeat", "A");
testRunner.testCase.testSuite.setPropertyValue("RowNumber", "1");
testRunner.testCase.testSuite.setPropertyValue("RowSeat_INF", "B");
testRunner.testCase.testSuite.setPropertyValue("RowNumber_INF", "1");
testRunner.testCase.testSuite.setPropertyValue("RowSeat_CHD", "C");
testRunner.testCase.testSuite.setPropertyValue("RowNumber_CHD", "1");

testRunner.testCase.testSuite.setPropertyValue("RowSeat_returnSeg", "A");
testRunner.testCase.testSuite.setPropertyValue("RowNumber_returnSeg", "5");
testRunner.testCase.testSuite.setPropertyValue("RowSeat_returnSeg_INF", "B");
testRunner.testCase.testSuite.setPropertyValue("RowNumber_returnSeg_INF", "5");
testRunner.testCase.testSuite.setPropertyValue("RowSeat_returnSeg_CHD", "C");
testRunner.testCase.testSuite.setPropertyValue("RowNumber_returnSeg_CHD", "5");

//add OAL Flight Segment
testRunner.testCase.testSuite.setPropertyValue("OAL_CarrierCode", "WG");
testRunner.testCase.testSuite.setPropertyValue("OAL_FlightNumber","1590");
testRunner.testCase.testSuite.setPropertyValue("OAL_Origin", "YUL");
testRunner.testCase.testSuite.setPropertyValue("OAL_Destination", "CDG");
testRunner.testCase.testSuite.setPropertyValue("OAL_FarebasisCode", "B");
testRunner.testCase.testSuite.setPropertyValue("OAL_ScheduledDepartureTime", "T12:30:00.000+05:00");
testRunner.testCase.testSuite.setPropertyValue("OAL_ScheduledArrivalTime", "T15:30:00.000+05:00");




log.info(DepartureDate)
log.info(ModifyDate)</script>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
  <con:environmentSpec>
    <con:entry environmentId="ff76c282-7c43-48ac-88d6-a00107f279b7">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
</con:testCase>
